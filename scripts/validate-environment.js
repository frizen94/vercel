#!/usr/bin/env node
/**
 * Script de Valida√ß√£o de Ambiente para Railway
 * Verifica se todas as vari√°veis de ambiente necess√°rias est√£o configuradas
 */

// Cores para output sem depend√™ncia externa
const colors = {
  red: (text) => `\x1b[31m${text}\x1b[0m`,
  green: (text) => `\x1b[32m${text}\x1b[0m`,
  yellow: (text) => `\x1b[33m${text}\x1b[0m`,
  blue: (text) => `\x1b[34m${text}\x1b[0m`,
  gray: (text) => `\x1b[90m${text}\x1b[0m`,
  bold: (text) => `\x1b[1m${text}\x1b[0m`,
};

function validateEnvironment() {
  console.log(colors.blue('üîç Validando configura√ß√£o de ambiente...\n'));

  const isProduction = process.env.NODE_ENV === 'production';
  const isRailway = process.env.RAILWAY_ENVIRONMENT || process.env.RAILWAY_PROJECT_ID;
  
  let errorCount = 0;
  let warnings = 0;

  // Fun√ß√£o para validar vari√°vel obrigat√≥ria
  function checkRequired(varName, description, value) {
    if (!value) {
      console.log(colors.red(`‚ùå ${varName}: ${description} - OBRIGAT√ìRIA`));
      errorCount++;
    } else {
      console.log(colors.green(`‚úÖ ${varName}: Configurada`));
    }
  }

  // Fun√ß√£o para validar vari√°vel opcional
  function checkOptional(varName, description, value, recommendation) {
    if (!value) {
      console.log(colors.yellow(`‚ö†Ô∏è  ${varName}: ${description} - OPCIONAL`));
      if (recommendation) {
        console.log(colors.gray(`   üí° ${recommendation}`));
      }
      warnings++;
    } else {
      console.log(colors.green(`‚úÖ ${varName}: Configurada`));
    }
  }

  console.log(colors.bold('üîê VARI√ÅVEIS OBRIGAT√ìRIAS:'));
  
  // Validar DATABASE_URL
  checkRequired(
    'DATABASE_URL',
    'String de conex√£o PostgreSQL',
    process.env.DATABASE_URL
  );

  // Validar SESSION_SECRET
  const sessionSecret = process.env.SESSION_SECRET;
  if (!sessionSecret) {
    console.log(colors.red(`‚ùå SESSION_SECRET: Chave secreta para sess√µes - OBRIGAT√ìRIA`));
    errorCount++;
  } else if (sessionSecret.length < 32) {
    console.log(colors.red(`‚ùå SESSION_SECRET: Muito curta (${sessionSecret.length} chars). M√≠nimo: 32 caracteres`));
    errorCount++;
  } else if (sessionSecret === 'kanban-board-secret-key') {
    console.log(colors.red(`‚ùå SESSION_SECRET: Usando valor padr√£o inseguro!`));
    errorCount++;
  } else {
    console.log(colors.green(`‚úÖ SESSION_SECRET: Configurada (${sessionSecret.length} caracteres)`));
  }

  console.log(colors.bold('\n‚öôÔ∏è  VARI√ÅVEIS DE SISTEMA:'));

  // Validar NODE_ENV
  checkOptional(
    'NODE_ENV',
    'Ambiente de execu√ß√£o',
    process.env.NODE_ENV,
    'Recomendado: "production" para Railway'
  );

  // Validar PORT
  checkOptional(
    'PORT',
    'Porta do servidor',
    process.env.PORT,
    'Railway define automaticamente'
  );

  console.log(colors.bold('\nüöÄ VARI√ÅVEIS DO RAILWAY:'));

  // Verificar detec√ß√£o do Railway
  if (isRailway) {
    console.log(colors.green('‚úÖ RAILWAY_ENVIRONMENT: Railway detectado'));
    checkOptional('RAILWAY_PROJECT_ID', 'ID do projeto Railway', process.env.RAILWAY_PROJECT_ID);
    checkOptional('RAILWAY_SERVICE_ID', 'ID do servi√ßo Railway', process.env.RAILWAY_SERVICE_ID);
  } else {
    console.log(colors.yellow('‚ö†Ô∏è  RAILWAY: Ambiente Railway n√£o detectado'));
    console.log(colors.gray('   üí° Normal em desenvolvimento local'));
  }

  console.log(colors.bold('\nüîí CONFIGURA√á√ïES DE SEGURAN√áA:'));

  // SSL do banco
  const forceSSL = process.env.FORCE_DB_SSL === 'true' || isProduction || isRailway;
  if (forceSSL) {
    console.log(colors.green('‚úÖ SSL do Banco: Habilitado (produ√ß√£o/Railway)'));
  } else {
    console.log(colors.yellow('‚ö†Ô∏è  SSL do Banco: Desabilitado (desenvolvimento)'));
  }

  // Configura√ß√µes de sess√£o
  if (isProduction) {
    console.log(colors.green('‚úÖ Cookies Seguros: Habilitado (produ√ß√£o)'));
  } else {
    console.log(colors.yellow('‚ö†Ô∏è  Cookies Seguros: Desabilitado (desenvolvimento)'));
  }

  console.log(colors.bold('\nüìä RESUMO DA VALIDA√á√ÉO:'));

  if (errorCount > 0) {
    console.log(colors.red(`‚ùå ${errorCount} erro(s) encontrado(s)`));
    console.log(colors.red('üö´ Deploy ser√° BLOQUEADO at√© resolver os erros'));
    console.log(colors.gray('\nüí° Para resolver:'));
    console.log(colors.gray('   1. Acesse o painel do Railway'));
    console.log(colors.gray('   2. V√° em Variables'));
    console.log(colors.gray('   3. Configure as vari√°veis marcadas como ‚ùå'));
    process.exit(1);
  } else {
    console.log(colors.green(`‚úÖ Ambiente configurado corretamente!`));
    if (warnings > 0) {
      console.log(colors.yellow(`‚ö†Ô∏è  ${warnings} aviso(s) - funcional mas pode ser otimizado`));
    }
    console.log(colors.green('üöÄ Pronto para deploy no Railway!'));
  }

  console.log(colors.bold('\nüîß EXEMPLO DE CONFIGURA√á√ÉO:'));
  console.log(colors.gray('SESSION_SECRET=sua-chave-secreta-de-32-caracteres-ou-mais'));
  console.log(colors.gray('NODE_ENV=production'));
  console.log(colors.gray('# DATABASE_URL ser√° definida automaticamente pelo PostgreSQL add-on'));
}

// Executar valida√ß√£o
try {
  validateEnvironment();
} catch (error) {
  console.log(colors.red('‚ùå Erro durante valida√ß√£o:'), error.message);
  process.exit(1);
}